{
	"info": {
		"_postman_id": "557c6ef6-126e-4b46-995e-7310a4be6c6b",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31365340"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"name\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"price\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"sku\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"description\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"id\",\r",
									"      \"name\",\r",
									"      \"price\",\r",
									"      \"sku\",\r",
									"      \"description\"\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"productSchema\" , schema);\r",
									"let response = pm.response.json();\r",
									"pm.globals.set(\"productID\", response.id);\r",
									"\r",
									"pm.test('Response time should be less than 200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code should be 201\",  () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(pm.collectionVariables.get(\"productSchema\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"orange\",\r\n    \"price\": 8,\r\n    \"sku\": 123321123,\r\n    \"description\": \"wouh\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"name\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"price\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"sku\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"description\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"id\",\r",
									"      \"name\",\r",
									"      \"price\",\r",
									"      \"sku\",\r",
									"      \"description\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"productListSchema\", schema);\r",
									"\r",
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(pm.collectionVariables.get('productListSchema'));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(pm.collectionVariables.get(\"productSchema\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products sorted by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Response time should be less than 200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"\r",
									"pm.test('Status code should be 200', () => {\r",
									"    pm.response.to.be.ok;\r",
									"})\r",
									"\r",
									"pm.test(\"Products should be in sorted order\", () => {\r",
									"    let expectedSortedOrder = responseArray.sort((a, b) => a.name.localeCompare(b.name));\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(pm.collectionVariables.get('productListSchema'));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=ASC&sortKey=name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List products with pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Response time should be less than 200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"\r",
									"pm.test('Status code should be 200', () => {\r",
									"    pm.response.to.be.ok;\r",
									"})\r",
									"\r",
									"pm.test(\"Pages should contain up to 2 items\", () => {\r",
									"    let responseLength = responseArray.length;\r",
									"    console.log(pm.request.url.query.toObject().from);\r",
									"    pm.expect(responseLength).to.be.within(1, 2);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(pm.collectionVariables.get('productListSchema'));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?page=2&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(pm.collectionVariables.get(\"productSchema\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"banana\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(pm.collectionVariables.get(\"productSchema\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									" \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"number\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"name\",\r",
									"    \"sku\",\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"orderSchema\", schema);\r",
									"let response = pm.response.json();\r",
									"pm.globals.set(\"orderID\", response.id);\r",
									"pm.test('Response time should be less than 200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code should be 201\",  () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(pm.collectionVariables.get(\"orderSchema\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = { \r",
									" \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"name\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"sku\": {\r",
									"        \"type\": \"number\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"id\",\r",
									"      \"name\",\r",
									"      \"sku\"\r",
									"    ]\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.collectionVariables.set(\"orderListSchema\", schema);\r",
									"\r",
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(pm.collectionVariables.get('orderListSchema'));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(pm.collectionVariables.get(\"orderSchema\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get orders sorted by sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Products should be in sorted order\", () => {\r",
									"    let expectedSortedOrder = responseArray.sort((a, b) => a.sku - b.sku);\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(pm.collectionVariables.get('orderListSchema'));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?sortOrder=ASC&sortKey=sku",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "sku"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders with pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Response time should be less than 200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"\r",
									"pm.test('Status code should be 200', () => {\r",
									"    pm.response.to.be.ok;\r",
									"})\r",
									"\r",
									"pm.test(\"Pages should contain up to 2 items\", () => {\r",
									"    let responseLength = responseArray.length;\r",
									"    console.log(pm.request.url.query.toObject().from);\r",
									"    pm.expect(responseLength).to.be.within(1, 2);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(pm.collectionVariables.get('orderListSchema'));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?page=1&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(pm.collectionVariables.get(\"orderSchema\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(pm.collectionVariables.get(\"orderSchema\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time should be less than 200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code should be 201\",  () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.not.have.jsonSchema(pm.collectionVariables.get(\"orderSchema\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									" \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"firstName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"lastName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"email\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"dateOfBirth\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"emailVerified\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"signUpDate\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"status\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"level\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"id\",\r",
									"      \"firstName\",\r",
									"      \"lastName\",\r",
									"      \"email\",\r",
									"      \"dateOfBirth\",\r",
									"      \"emailVerified\",\r",
									"      \"signUpDate\",\r",
									"      \"status\",\r",
									"      \"level\"\r",
									"    ]\r",
									"  }\r",
									"};\r",
									"pm.collectionVariables.set('userListSchema', schema);\r",
									"\r",
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(pm.collectionVariables.get('userListSchema'));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(pm.collectionVariables.get(\"userSchema\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users sorted by first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Response time should be less than 200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"\r",
									"pm.test('Status code should be 200', () => {\r",
									"    pm.response.to.be.ok;\r",
									"})\r",
									"\r",
									"pm.test(\"Products should be in sorted order\", () => {\r",
									"    let expectedSortedOrder = responseArray.sort((a, b) => {\r",
									"        return a.firstName.localeCompare(b.firstName);\r",
									"    });\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(pm.collectionVariables.get('userListSchema'));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?sortOrder=ASC&sortKey=firstName",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "firstName"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders with pagination Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Response time should be less than 200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"\r",
									"pm.test('Status code should be 200', () => {\r",
									"    pm.response.to.be.ok;\r",
									"})\r",
									"\r",
									"pm.test(\"Pages should contain up to 2 items\", () => {\r",
									"    let responseLength = responseArray.length;\r",
									"    console.log(pm.request.url.query.toObject().from);\r",
									"    pm.expect(responseLength).to.be.within(1, 2);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(pm.collectionVariables.get('userListSchema'));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=1&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(pm.collectionVariables.get(\"userSchema\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 200\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(pm.collectionVariables.get(\"userSchema\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "productsSchema",
			"value": ""
		},
		{
			"key": "productSchema",
			"value": ""
		},
		{
			"key": "productListSchema",
			"value": ""
		},
		{
			"key": "orderListSchema",
			"value": ""
		},
		{
			"key": "orderSchema",
			"value": ""
		},
		{
			"key": "userListSchema",
			"value": ""
		},
		{
			"key": "userSchema",
			"value": ""
		}
	]
}